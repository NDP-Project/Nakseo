[ 자바스크립트 ] - 중복을 끝까지 쫓아가서 줄여라.코드 양을 줄이는게 중요하다.

▶ 함수 - 코드에 이름 붙이는 것.
▶ 동작하는 내용은 똑같지만 코드를 효율적으로 사용하는것 : 리팩토링 -> 핵심 : 함수

▶ attribute  = 속성
▶ alert = 경고(창?)
▶ string = 문자(열)
▶ parameter = 매개변수
▶ argument = 인자


▶ div라는 태그는 어떠한 기능도, 의미도 없지만 css와 js를 통해 기능을 넣어줄 수 있다. 
</div>를 쓰면 줄바꿈이 됨. -> 줄바꿈이 안되는 div = span

▶ "*" 는 문자열이다. 1 은 숫자이고, "1" 은 문자다.

▶ 변수를 선언할 땐 변수 앞에 var(variables)을 붙여줘라. ex) var name = 'nakseo'


▶HTML 안에서 작동하는 프로그래밍 언어이기때문에 HTML 상에서
<script> & </script> 를 써줘야 이 태그 안에 있는 내용들은 스크립트가 작동한다고 인식함.


▶ 또한 동적임. 정적과 동적은 나뉘는데,
HTML은 정적이여서 1+1 을 입력하면 '1+1' 이 그대로 출력되지만,
자바스크립트는 동적이여서 1+1을 입력하면 '2'가 출력됨.


▶자바스크립트에서 무언가를 출력하려면 document.write(*) 를 씀.


▶ 코드를 작성함에 있어 ;(세미콜론)은 한글의 마침표(.)와 같은 역할로,
이 줄에 더이상 코드를 적지 않겠다. 라는 뜻으로 받아들이면 된다.


▶ 이벤트 : 자바스크립트가 사용자와 상호작용하는데 중요한 역할임.


▶ HTML에서 버튼을 출력하려면
<input type="button" value="*" onlick="*"> 작성함.


▶onclick의 속성은 반드시 js가 와야함.
& onclick을 기억하고있다가 onclick="*" 중 *를 js문법으로 해석해서 출력함.


▶<input type="text" onchange="alert('changed')">
 가장 중요한 '이벤트'는 input type 다음 on으로 시작하는 명령어들이 중요하다.

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
[ CSS ] <- 선택자만.

▶ style = " * "
*에는 속성이 들어감. ex) color:red; (글씨색깔 red)
font-weight:bold; (글씨 굵게)
background-color:coral; (배경색 coral)

▶ class="*"
*에는 지정해놓는 그룹? 이 생김. ex) class="adidas" 로 해놓으면 이 태그가 포함되어있는 글씨들은 모두 adidas라고 지정됨.
또한 class=" " 내에는 여러가지 클래스가 들어갈 수 있음.(띄어쓰기로 구분)

▶ 그러므로, adidas라고 지정해놓은 글씨들만 속성을 부여하고싶으면, css의 명령어를 활용해서
<style>
.adidas{                                         <- .adidas는 class값이 adidas인 모든것을 가르킴.
   font-weight:bold;                                #을 붙인다면 id값이 *인 모든것을 가르키는것.
   color:red;                                       아무것도 안붙인다면 span/div를 가르킴.
}
</style>
이런식으로 작성하면됨.


▶ id는 텍스트 하나하나를 학번처럼 '지정' 하는 것이라 중복해서 쓰면 안됨.
class는 텍스트 하나하나를 1학년1반처럼 '그룹시키는것' 이므로 중복해서 쓰는것 가능.

▶ 그러므로, class로 묶은 뒤 id를 통해 그룹 중 개별화를 시킬 수 있음! (id선택자가 가장 우선순위가 높음.)
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
다시 자바스크립트!

▶document.querySelector('body').style.vackgroundColor = 'red';

-> 이 문서(document)에서 body를 찾아서 선택하고,(.querySelector('body')) 배경색을 red로 해라!(.style.vackgroundColor = 'red')


▶비교 연산자 === (= 3번사용) -> 좌항과 우항의 값이 같은가? > 같음 true 틀리면 false (true와 false는 묶어서 Boolean이라고 부름


▶ HTML에서 꺾쇄 >< 는 태그로 인식하기때문에 ~보다 작다 를 표현하려면 &lt 를 써야함. (less than)
물론 계산식에서는 >< 부등호는 그대로 씀. 문자로 표현하려고 할때만 &lt 를 사용함.


▶ 조건(반복)문을 쓸때는 보통 while(true,false 등 조건을 통한 boolean이 나와야한다.) 
조건문에 들어갈 변수 선언은 var i = X 이런식으로 보통 i를 변수로 쓴다.

▶ 배열 : 순서대로 서로 연결된 데이터를 잘 정리정돈하는것 & 순서대로 저장됨. 
ex) var Friends = [서노,필댕,준띨] -> Friends[0] // 서노 , Friends[2] // 준띨
반복문 : 순서대로 배열에 담겨있는 데이터를 자동으로 하나씩 꺼내서 자동화된 처리를 할 수 있는 기능

▶<h1><a href="index.html">WEB</a></h1>
  <input id="night_day" type="button" value="night" onclick="
    var target = document.querySelector('body');
    if(this.value === 'night'){
      target.style.backgroundColor = 'black';
      target.style.color = 'white';
      this.value = 'day';

      var alist = document.querySelectorAll('a');
      var i = 0;
      while(i < alist.length){
        alist[i].style.color = 'powderblue';
        i = i + 1;
      }
    } else {
      target.style.backgroundColor = 'white';
      target.style.color = 'black';
      this.value = 'night';

      var alist = document.querySelectorAll('a');
      var i = 0;
      while(i < alist.length){
        alist[i].style.color = 'blue';
        i = i + 1;
      }
    }
  ">
  <ol>
    <li><a href="1.html">HTML</a></li>
    <li><a href="2.html">CSS</a></li>
    <li><a href="3.html">JavaScript</a></li>
  </ol>
  <h2>JavaScript</h2>
  <p>
    JavaScript (/ˈdʒɑːvəˌskrɪpt/[6]), often abbreviated as JS, is a high-level, dynamic, weakly typed, prototype-based, multi-paradigm, and interpreted programming language. Alongside HTML and CSS, JavaScript is one of the three core technologies of World Wide Web content production. It is used to make webpages interactive and provide online programs, including video games. The majority of websites employ it, and all modern web browsers support it without the need for plug-ins by means of a built-in JavaScript engine. Each of the many JavaScript engines represent a different implementation of JavaScript, all based on the ECMAScript specification, with some engines not supporting the spec fully, and with many engines supporting additional features beyond ECMA.
  </p>

-----------------------------------------------------------------------
[함수]Function <- 선언!

ex1) ▶ function onePlusone)(){
	document.write(1+1+'<br>');
       }


ex2) ▶ function sum(left,right){
	document.write(left+right+'<br>')
	{


▶ Return 중요!
function sum(left, right){
document.write(left+right);
} 
sum(2,3); // 5 

function sumColorRed(left, right){
document.write('<div style = "color:red">+(left+right)+'</div>');
}
sub(2,3); // 5 (빨갛게 변한 숫자 5)

결과값(덧셈)은 같으나 서로다른 효과를 주기위해 새로운 함수를 작성해야 하는 번거러움이 있으며 이는 함수가 더욱 복잡해 졌을때 큰 부담이 될 수 있다. 

function sum2(left, right){
return left + right; 
} 

document.write(sum2(2,3)); // 5
document.write('<div style="color:red">'+sum2(2,3)+'</div>'); // 5 (빨갛게 변한 숫자 5)
document.write('<div style="font-size:3rem;">'+sum2(2,3)+'</div>'); // 5(폰트 사이즈가 커진 숫자5)

하지만 이처럼 return값을 함수에 포함시키면서 함수의 활용성을 극대화 시킬 수 있으며, 함수의 가장 기본적이면서도 중요한 속성인 '재활용성'을 유지할 수 있다

>>>>>>>>>>>>>>>>> So, Return 함수의 의미는 결국 '재사용이 가능한 값을 도출' 해내는것이다.
똑같은 결과값(덧셈)에 다른 효과(색깔, 폰트크기 등)를 주기위해서 함수를 새롭게 만들어 나가는 것 보다,
처음부터 함수를 만들때 재사용이 가능하도록 return값을 주면 필요(색상의 선택, 폰트크기 등)에 따라 자유롭게 코드를 구현할 수 있다.
 

▶ 객체 Object
함수위에서 작동하는 상위호환이라고 생각하면 됨. 새로운것을 배운다기보단 심화과정이라고 생각.


▶ 복잡한, 중복된 코드들을 정리하기 위한 도구 -> 함수
  그 함수가 많아지면 복잡하고 중복되므로 또 그것을 정리하기 위한 도구 -> 객체
  폴더에서 디렉토리를 만들며 정리한다고 생각해라.

▶ 코드 中 의미가 불명확하거나 나중에 보았을 때 그 의미를 파악하기 어려울 때는 함수를 통해
 그 코드에 Logic을 부여하는 것도 좋은 전략이다.
 

▶ 객체안에 속해있는(포함된) 함수는 함수라고 부르지않고 메소드라고 부른다.
  객체안에 속해있는(포함된) 변수는 프로퍼티라고 부른다.


▶ 배열은 대괄호 [ ] 
  객체는 중괄호 { }


▶ document.coworkers 에서 .은 document에 접근(access)하는것을 나타내는 표현임.


▶ 	[ 객체의 문법 ]
	결국 객체도 '정리'를 위한 선언이기때문에 var을 박고 시작한다.
	ex)
	var coworkers = {
	 "programmer : egoing",
	 "designer : leezche"
	};
	document.write("programmer : "+coworkers.programmer+"<br>"); -> programmer : egoing 출력
	document.write("designer : "+coworkers.designer+"<br>"); -> designer : leezche 출력
	coworkers.bookkeeper = "duru"; -> coworkers라는 객체에 bookkeeper : duru 추가
	document.write("bookkeeper : "+coworkers.bookkeeper+"<br>"); -> bookkeeper : duru 출력
	coworkers["data scientist"] = "	taeho"; -> coworkers에 data scientist : taeho 가 추가되었지만,
					"data scientist"는 중간에 띄어쓰기가 들어가므로 [" "] 로 묶어준다.
	document.write("data scientist : "+coworkers["data scientist"]+"<br>"); -> data scientist : taeho 출력


▶ 객체의 반복문은 for - in 문을 사용한다.
	ex)
	for(var key in coworkers) {
	document.write(key+"<br>"); -> programmer <br> designer <br> bookkeeper <br> data scientitst
	document.wirte(coworkers[key]+"<br>") -> egoing <br> leezche <br> duru <br> taeho
	document.wirte(key+coworkers[key[]+"<br>") -> programmer : egoing <br> designer : leezche --;


▶ 	coworkers.showAll = function(){ }
	var showAll = function() { }
	function showAll() { }   		이 세개는 모두 같은 뜻임. (출력값이 같음)


▶ 	coworkers.showAll = function() {
	 for(var key in coworkers) {
	  document.write(key+" : "+coworkers[key]+"<br>")
	 }
	}							<-에서 coworkers는 this로 대체될 수 있음.
								(중복을 줄이기위해 할수있으면 무조건 해야함.) 


▶ 어떤 태그에 자식태그를 추가하고싶다면 document 객체를 조금 더 자세히 찾아봐라.


▶ document로도 찾아볼 수 없다면 DOM 객체로도 찾아봐라.
